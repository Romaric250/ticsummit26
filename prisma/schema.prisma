// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @map("_id") @db.String
  email         String    @unique
  name          String?
  image         String?
  emailVerified Boolean   @default(false)
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Better Auth relations
  accounts account[]
  sessions session[]

  // Custom relations
  mentorProfile    MentorProfile?
  volunteerProfile VolunteerProfile?
  blogPosts        BlogPost[]
  comments         Comment[]
  likes            Like[]
  views            View[]
  projects         Project[]
  applications     Application[]

  @@map("users")
}

model account {
  id                    String  @id @map("_id") @db.String
  userId                String  @db.String
  type                  String @default("oauth")
  provider              String @default("google")
  providerId            String
  accountId             String
  refresh_token         String?
  access_token          String?
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  idToken               String?
  session_state         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("accounts")
}

model session {
  id           String   @id @map("_id") @db.String
  sessionToken String?  @unique
  userId       String   @db.String
  expires      DateTime?
  expiresAt    DateTime?
  token        String?  @unique
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model verification {
  id         String   @id @map("_id") @db.String
  identifier String
  token      String?  @unique
  expiresAt  DateTime
  value      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model MentorProfile {
  id          String   @id @map("_id") @db.String
  userId      String   @unique @db.String
  bio         String?
  specialties String[]
  experience  String?
  company     String?
  location    String?
  education   String?
  languages   String[]
  achievements String[]
  socialLinks Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mentor_profiles")
}

model VolunteerProfile {
  id          String   @id @map("_id") @db.String
  userId      String   @unique @db.String
  bio         String?
  specialties String[]
  experience  String?
  location    String?
  interests   String[]
  availability String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("volunteer_profiles")
}

model BlogPost {
  id          String   @id @map("_id") @db.String
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  image       String?
  category    String
  tags        String[]
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  publishedAt DateTime?
  views       Int      @default(0)
  likesCount  Int      @default(0)
  readTime    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String @db.String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("blog_posts")
}

model Comment {
  id        String   @id @map("_id") @db.String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId   String @db.String
  post     BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String @db.String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @map("_id") @db.String
  createdAt DateTime @default(now())

  // Relations
  projectId String @db.String
  userId    String @db.String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("likes")
}

model View {
  id        String   @id @map("_id") @db.String
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?

  // Relations
  projectId String @db.String
  userId    String? @db.String
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, ipAddress])
  @@map("views")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  images      String[]
  techStack   String[]
  members     String[]
  category    String
  status      ProjectStatus @default(SUBMITTED)
  phase       String?
  slug        String?
  year        Int?
  demoUrl     String?
  views       Int      @default(0)
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String @db.String
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Application {
  id        String   @id @map("_id") @db.String
  type      ApplicationType
  status    ApplicationStatus @default(PENDING)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @db.String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("applications")
}

enum UserRole {
  STUDENT
  MENTOR
  VOLUNTEER
  ADMIN
}

enum ProjectStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  FINALIST
  WINNER
}

enum ApplicationType {
  MENTOR
  VOLUNTEER
  STUDENT
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

