// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Better Auth relations
  accounts account[]
  sessions session[]

  // Custom relations
  mentorProfile    MentorProfile?
  volunteerProfile VolunteerProfile?
  blogPosts        BlogPost[]
  comments         Comment[]
  likes            Like[]
  projects         Project[]
  applications     Application[]

  @@map("users")
}

model account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model verification {
  id         String   @id @map("_id") @db.ObjectId
  identifier String
  token      String?  @unique
  expiresAt  DateTime
  value      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model MentorProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  bio         String?
  specialties String[]
  experience  String?
  company     String?
  location    String?
  education   String?
  languages   String[]
  achievements String[]
  socialLinks Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mentor_profiles")
}

model VolunteerProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  bio         String?
  specialties String[]
  experience  String?
  location    String?
  interests   String[]
  availability String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("volunteer_profiles")
}

model BlogPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  image       String?
  category    String
  tags        String[]
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  publishedAt DateTime?
  views       Int      @default(0)
  likesCount  Int      @default(0)
  readTime    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String @db.ObjectId
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@map("blog_posts")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId   String @db.ObjectId
  post     BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String @db.ObjectId
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  postId   String @db.ObjectId
  post     BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   String @db.ObjectId
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String?
  techStack   String[]
  category    String
  status      ProjectStatus @default(SUBMITTED)
  phase       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String @db.ObjectId
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Application {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      ApplicationType
  status    ApplicationStatus @default(PENDING)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("applications")
}

enum UserRole {
  STUDENT
  MENTOR
  VOLUNTEER
  ADMIN
}

enum ProjectStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  FINALIST
  WINNER
}

enum ApplicationType {
  MENTOR
  VOLUNTEER
  STUDENT
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}