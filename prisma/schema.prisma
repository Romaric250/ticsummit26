// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
  
//   relationMode = "prisma"
// }

// model User {
//   id            String    @id @map("_id")
//   email         String    @unique
//   name          String?
//   image         String?
//   emailVerified Boolean   @default(false)
//   role          UserRole  @default(STUDENT)
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt

//   // Better Auth relations
//   accounts account[]
//   sessions session[]

//   // Custom relations
//   // volunteerProfile VolunteerProfile?
//   blogPosts        BlogPost[]
//   comments         Comment[]
//   likes            Like[]
//   views            View[]
//   projects         Project[]
//   applications     Application[]

//   @@map("users")
// }

// model account {
//   id                    String  @id @map("_id")
//   userId                String
//   type                  String @default("oauth")
//   provider              String @default("google")
//   providerId            String
//   accountId             String
//   refresh_token         String?
//   access_token          String?
//   accessToken           String?
//   accessTokenExpiresAt  DateTime?
//   expires_at            Int?
//   token_type            String?
//   scope                 String?
//   id_token              String?
//   idToken               String?
//   session_state         String?
//   createdAt             DateTime @default(now())
//   updatedAt             DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerId])
//   @@map("accounts")
// }

// model session {
//   id           String   @id @map("_id")
//   sessionToken String?  @unique
//   userId       String
//   expires      DateTime?
//   expiresAt    DateTime?
//   token        String?  @unique
//   ipAddress    String?
//   userAgent    String?
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model verification {
//   id         String   @id @map("_id")
//   identifier String
//   token      String?  @unique
//   expiresAt  DateTime
//   value      String?
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }

// model MentorProfile {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   slug        String   @unique
//   name        String
//   email       String
//   profileImage String?
//   bio         String?
//   specialties String[]
//   experience  String?
//   company     String?
//   location    String?
//   education   String?
//   languages   String[]
//   achievements String[]
//   socialLinks Json?
//   yearJoined  Int?     // Added year joined field
//   isActive    Boolean  @default(true)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@map("mentor_profiles")
// }

// model AlumniProfile {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   slug        String   @unique
//   name        String
//   email       String
//   profileImage String?
//   bio         String?
//   graduationYear Int?
//   currentRole String?
//   company     String?
//   location    String?
//   achievements String[]
//   socialLinks Json?
//   isActive    Boolean  @default(true)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@map("alumni_profiles")
// }

// model VolunteerProfile {
//   id          String   @id @map("_id") @db.String
//   userId      String
//   specialties String[]
//   experience  String?
//   location    String?
//   interests   String[]
//   availability String?
//   isActive    Boolean  @default(true)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Relations

//   @@map("volunteer_profiles")
// }

// model BlogPost {
//   id          String   @id @map("_id") @db.String
//   title       String
//   slug        String   @unique
//   excerpt     String
//   content     String
//   image       String?
//   category    String
//   tags        String[]
//   featured    Boolean  @default(false)
//   published   Boolean  @default(false)
//   publishedAt DateTime?
//   views       Int      @default(0)
//   likesCount  Int      @default(0)
//   readTime    String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Relations
//   authorId String
//   author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   comments Comment[]

//   @@map("blog_posts")
// }

// model Comment {
//   id        String   @id @map("_id") @db.String
//   content   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Relations
//   postId   String @db.String
//   post     BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
//   authorId String
//   author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

//   @@map("comments")
// }

// model Like {
//   id        String   @id @map("_id") @db.String
//   createdAt DateTime @default(now())

//   // Relations
//   projectId String @db.String
//   userId    String
//   user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([projectId, userId])
//   @@map("likes")
// }

// model View {
//   id        String   @id @map("_id") @db.String
//   createdAt DateTime @default(now())
//   ipAddress String?
//   userAgent String?

//   // Relations
//   projectId String @db.String
//   userId    String? @db.ObjectId
//   user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([projectId, ipAddress])
//   @@map("views")
// }

// model Project {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   description String
//   images      String[]
//   techStack   String[]
//   members     String[]
//   category    String
//   status      ProjectStatus @default(SUBMITTED)
//   phase       String?
//   slug        String?
//   year        Int?
//   demoUrl     String?
//   views       Int      @default(0)
//   likes       Int      @default(0)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Relations
//   authorId String
//   author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

//   @@map("projects")
// }

// model Application {
//   id        String   @id @map("_id") @db.String
//   type      ApplicationType
//   status    ApplicationStatus @default(PENDING)
//   data      Json?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Relations
//   userId String @db.ObjectId
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("applications")
// }

// enum UserRole {
//   STUDENT
//   MENTOR
//   VOLUNTEER
//   ADMIN
// }

// enum ProjectStatus {
//   SUBMITTED
//   UNDER_REVIEW
//   APPROVED
//   REJECTED
//   FINALIST
//   WINNER
// }

// enum ApplicationType {
//   MENTOR
//   VOLUNTEER
//   STUDENT
// }

// enum ApplicationStatus {
//   PENDING
//   APPROVED
//   REJECTED
// }



// This is your Prisma schema file
// Learn more at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @map("_id")
  email         String    @unique
  name          String?
  image         String?
  emailVerified Boolean   @default(false)
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Better Auth relations
  accounts account[]
  sessions session[]

  // Custom relations
  blogPosts    BlogPost[]
  comments     Comment[]
  likes        Like[]
  views        View[]
  blogLikes    BlogLike[]
  projects     Project[]
  applications Application[]

  @@map("users")
}

model account {
  id                   String   @id @map("_id")
  userId               String
  providerId           String   // e.g. "google"
  accountId            String   // provider’s user id (Google sub)
  refreshToken         String?
  accessToken          String?
  accessTokenExpiresAt DateTime?
  idToken              String?
  scope                String?  // <-- add this back
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model session {
  id           String   @id @map("_id")
  userId       String
  token        String   @unique               // ✅ keep only this unique field
  expiresAt    DateTime?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


model verification {
  id         String   @id @map("_id")
  identifier String
  token      String?  @unique
  expiresAt  DateTime
  value      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ===================== CUSTOM MODELS =====================

model MentorProfile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  slug         String   @unique
  name         String
  email        String
  profileImage String?
  bio          String?
  specialties  String[]
  experience   String?
  company      String?
  location     String?
  education    String?
  languages    String[]
  achievements String[]
  socialLinks  Json?
  yearJoined   Int?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("mentor_profiles")
}

model AlumniProfile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  slug          String   @unique
  name          String
  email         String
  profileImage  String?
  bio           String?
  graduationYear Int?
  currentRole   String?
  company       String?
  location      String?
  achievements  String[]
  socialLinks   Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("alumni_profiles")
}

model VolunteerProfile {
  id           String   @id @map("_id") @db.String
  userId       String
  specialties  String[]
  experience   String?
  location     String?
  interests    String[]
  availability String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("volunteer_profiles")
}

model BlogPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  image       String?
  category    String
  tags        String[]
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  publishedAt DateTime?
  views       Int      @default(0)
  likesCount  Int      @default(0)
  readTime    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  blogLikes BlogLike[]
  blogViews BlogView[]

  @@map("blog_posts")
}
model BlogLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  blogId String @db.ObjectId
  userId String

  blog   BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([blogId, userId])
  @@map("blog_likes")
}

model BlogView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  ipAddress String
  userAgent String?

  blogId String @db.ObjectId
  blog   BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, ipAddress])
  @@map("blog_views")
}

model NewsletterSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  subscribedAt DateTime @default(now())
  active    Boolean  @default(true)

  @@map("newsletter_subscriptions")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId   String @db.ObjectId
  post     BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @map("_id") @db.String
  createdAt DateTime @default(now())

  projectId String @db.String
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("likes")
}

model View {
  id        String   @id @map("_id") @db.String
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?

  projectId String @db.String
  userId    String? @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, ipAddress])
  @@map("views")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  images      String[]
  techStack   String[]
  members     String[]
  category    String
  status      ProjectStatus @default(SUBMITTED)
  phase       String?
  slug        String?
  year        Int?
  demoUrl     String?
  views       Int      @default(0)
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Application {
  id        String   @id @map("_id") @db.String
  type      ApplicationType
  status    ApplicationStatus @default(PENDING)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("applications")
}

// ===================== ENUMS =====================

enum UserRole {
  STUDENT
  MENTOR
  VOLUNTEER
  ADMIN
}

enum ProjectStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  FINALIST
  WINNER
}

enum ApplicationType {
  MENTOR
  VOLUNTEER
  STUDENT
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

// ===================== CONTENT MANAGEMENT =====================

model FounderQuote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  initial   String   // The letter initial (e.g., "P")
  name      String   // Full name (e.g., "Dr. Pierre Nkeng")
  title     String   // Title (e.g., "Founder & CEO, TIC Summit")
  quote     String   // The quote text
  imageUrl  String?  // Profile image URL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("founder_quote")
}

model TeamMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique // URL-friendly identifier
  role        String   // e.g., "Co-Founder", "Technical Lead", etc.
  bio         String?
  imageUrl    String?
  email       String?
  linkedin    String?
  twitter     String?
  github      String?
  order       Int      @default(0) // For ordering members
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("team_members")
}

model SiteStats {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  studentsReached Int
  schoolsVisited   Int
  successfulProjects Int
  daysOfInnovation   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_stats")
}

model SiteFeature {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   // e.g., "Our Mission", "Innovation Focus"
  description String
  iconName    String?  // Name of icon from lucide-react
  color       String?  // Color class name
  order       Int      @default(0) // For ordering features
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_features")
}

model TICImpact {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  studentsInspired      Int      // Students inspired to pursue tech careers
  teenagersTrained       Int      // Teenagers trained with technical skills
  prizeAwardsFCFA       Float    // Prize awards in FCFA (e.g., 2.0 for 2M FCFA)
  ticClubsEstablished   Int      // TIC clubs established
  subtitle              String?  // e.g., "in 4 Years"
  description           String?  // e.g., "Transforming lives and building the future of tech in Cameroon"
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("tic_impact")
}

model SiteSettings {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  showTeamSection Boolean  @default(true) // Whether to show team section on about page
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("site_settings")
}

model HomeCarousel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        CarouselType
  imageUrl    String
  title       String
  subtitle    String?
  description String?
  category    String?
  order       Int      @default(0) // For ordering slides
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("home_carousels")
}

enum CarouselType {
  HERO      // Main hero carousel
  STUDENTS  // Students in action carousel
}

model TimelinePhase {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  duration    String   // e.g., "Jan - Mar 2025"
  status      PhaseStatus @default(UPCOMING)
  description String
  details     String[] // Array of detail strings
  iconName    String?  // Name of icon from lucide-react
  color       String?  // Color class name (e.g., "bg-green-500")
  participants String? // e.g., "5000+ students"
  order       Int      @default(0) // For ordering/swapping phases
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("timeline_phases")
}

enum PhaseStatus {
  COMPLETED
  ACTIVE
  UPCOMING
}
